# Generated by Django 3.0 on 2019-12-10 06:01
import os
import logging
from django.db import migrations
from stanfordcorenlp import StanfordCoreNLP


def load_SemEval2010(file_path, *args, **kwargs):
    '''
    加载SemEval2010数据集, 用于load_train_test_data函数
    '''
    import re
    sent_list = []
    entity_relation_list = []
    with StanfordCoreNLP('http://127.0.0.1', 9000, logging_level=logging.WARNING) as nlp:
        with open(file_path, 'r') as f:
            lines = f.readlines()
            for i in range(0, len(lines), 4):
                _, sent = lines[i].split('\t')
                sent = sent.strip()[1:-1]
                word_list = nlp.word_tokenize(sent)
                entity1_idx = word_list.index('</e1>') - 2
                entity1 = word_list[entity1_idx + 1]
                entity2_idx = word_list.index('</e2>') - 4
                entity2 = word_list[entity2_idx + 3]
                sent = sent.replace('<e1>', '')
                sent = sent.replace('</e1>', '')
                sent = sent.replace('<e2>', '')
                sent = sent.replace('</e2>', '')
                sent_list.append(sent)
                relation = lines[i + 1].strip()
                if len(re.findall(r'(\(e1,e2\)|\(e2,e1\))', relation)) > 0:
                    relation = relation[:-7]
                entity_relation_list.append(((entity1, entity1_idx), relation, (entity2, entity2_idx)))
    return sent_list, entity_relation_list


def get_relation_set(entity_relations):
    relation_set = set()
    for _, relation, _ in entity_relations:
        relation_set.add(relation)
    return relation_set

def init_SemEval_data(apps, schema_editor):
    SemEval2010Data = apps.get_model('data_process', 'SemEval2010Data')
    SemEval2010Relation = apps.get_model('data_process', 'SemEval2010Relation')

    data_path = '/Users/wanglei/Documents/实验数据/SemEval 2010 Task8'
    train_file = os.path.join(data_path, 'TRAIN_FILE.TXT')
    test_file = os.path.join(data_path, 'TEST_FILE_FULL.TXT')
    train_sent_list, train_entity_relation_list = load_SemEval2010(train_file, remove_other=False)
    relation_set = list(get_relation_set(train_entity_relation_list))
    # 存储关系类别，包括other
    for i in range(len(relation_set)):
        relation = SemEval2010Relation(number=i, name=relation_set[i])
        relation.save()
    # 存储训练、测试数据
    for sent, ((e1, e1_idx), r, (e2, e2_idx)) in zip(train_sent_list, train_entity_relation_list):
        SemEval2010Data(
            sent=sent,
            entity1=e1,
            entity2=e2,
            entity1_idx=e1_idx,
            entity2_idx=e2_idx,
            is_train=True,
            relation=relation_set.index(r)
        ).save()
    test_sent_list, test_entity_relation_list = load_SemEval2010(test_file, remove_other=False)
    for sent, ((e1, e1_idx), r, (e2, e2_idx)) in zip(test_sent_list, test_entity_relation_list):
        SemEval2010Data(
            sent=sent,
            entity1=e1,
            entity2=e2,
            entity1_idx=e1_idx,
            entity2_idx=e2_idx,
            is_train=False,
            relation=relation_set.index(r)
        ).save()


def delete_SemEval_data(apps, schema_editor):
    SemEval2010Data = apps.get_model('data_process', 'SemEval2010Data')
    SemEval2010Relation = apps.get_model('data_process', 'SemEval2010Relation')
    SemEval2010Relation.objects.all().delete()
    SemEval2010Data.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('data_process', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(init_SemEval_data, delete_SemEval_data)
    ]
